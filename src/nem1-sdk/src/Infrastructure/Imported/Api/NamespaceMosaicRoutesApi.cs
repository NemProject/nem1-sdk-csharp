/* 
 * NIS1 API
 *
 * This document defines all the nis1 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kodtycoon@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using io.nem1.sdk.Infrastructure.Imported.Client;
using Newtonsoft.Json.Linq;
using RestSharp;

namespace io.nem1.sdk.Infrastructure.Imported.Api
{
    /// <exclude />
    internal interface INamespaceMosaicRoutesApi : IApiAccessor
    {
        
        #region Asynchronous Operations
        /// <summary>
        /// Getting a namespace
        /// </summary>
        /// <remarks>
        /// Returns the information about a namespace
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NamespaceInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> NamespaceInfoAsync (string nameSpace);

        /// <summary>
        /// Getting a namespace
        /// </summary>
        /// <remarks>
        /// Returns the information about a namespace
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NamespaceInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> NamespaceInfoAsyncWithHttpInfo(string nameSpace);
        /// <summary>
        /// Getting mosaics for a given namespace
        /// </summary>
        /// <remarks>
        /// Returns the mosaics for a given namespace
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MosaicDefinitonInfoDTO</returns>
        System.Threading.Tasks.Task<List<JObject>> NamespaceMosaicInfoAsync (string nameSpace, string id, int pageSize);

        /// <summary>
        /// Getting mosaics for a given namespace
        /// </summary>
        /// <remarks>
        /// Returns the mosaics for a given namespace
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MosaicDefinitonInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<JObject>> NamespaceMosaicInfoAsyncWithHttpInfo (string nameSpace, string id, int pageSize);
        /// <summary>
        /// Getting root namespace information
        /// </summary>
        /// <remarks>
        /// Returns the root namespace information for a given namespace
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NamespaceRootInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> NamespaceRootInfoAsync ( string id = null, int pageSize = 25);

        /// <summary>
        /// Getting root namespace information
        /// </summary>
        /// <remarks>
        /// Returns the root namespace information for a given namespace
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NamespaceRootInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<JObject>> NamespaceRootInfoAsyncWithHttpInfo ( string id = null, int pageSize = 25);
        #endregion Asynchronous Operations
    }

    /// <exclude />
    internal class NamespaceMosaicRoutesApi : INamespaceMosaicRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceMosaicRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NamespaceMosaicRoutesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NamespaceMosaicRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        internal NamespaceMosaicRoutesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

       
        /// <summary>
        /// Getting a namespace Returns the information about a namespace
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NamespaceInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> NamespaceInfoAsync (string nameSpace)
        {
             ApiResponse<string> localVarResponse = await NamespaceInfoAsyncWithHttpInfo(nameSpace);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Getting a namespace Returns the information about a namespace
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NamespaceInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> NamespaceInfoAsyncWithHttpInfo (string nameSpace)
        {
            var localVarPath = "/namespace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nameSpace != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("namespace", nameSpace)
            }); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NamespaceInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

       

        /// <summary>
        /// Getting mosaics for a given namespace Returns the mosaics for a given namespace
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of MosaicDefinitonInfoDTO</returns>
        public async System.Threading.Tasks.Task<List<JObject>> NamespaceMosaicInfoAsync(string nameSpace, string id, int pageSize)
        {
             ApiResponse<JObject> localVarResponse = await NamespaceMosaicInfoAsyncWithHttpInfo(nameSpace, id, pageSize);
             return localVarResponse.Data["data"].ToObject<List<JObject>>();

        }

        /// <summary>
        /// Getting mosaics for a given namespace Returns the mosaics for a given namespace
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (MosaicDefinitonInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JObject>> NamespaceMosaicInfoAsyncWithHttpInfo(string nameSpace, string id, int pageSize)
        {

            var localVarPath = "/namespace/mosaic/definition/page";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nameSpace != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("namespace", nameSpace)
            }); // query parameter
            if (id != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("id", id)
            }); // query parameter
            if (pageSize > 0) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("pageSize", pageSize.ToString())
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NamespaceMosaicInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JObject) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JObject)));
        }

        
        /// <summary>
        /// Getting root namespace information Returns the root namespace information for a given namespace
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of NamespaceRootInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> NamespaceRootInfoAsync (string id = null, int pageSize = 25)
        {
             ApiResponse<JObject> localVarResponse = await NamespaceRootInfoAsyncWithHttpInfo(id, pageSize);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Getting root namespace information Returns the root namespace information for a given namespace
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (NamespaceRootInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<JObject>> NamespaceRootInfoAsyncWithHttpInfo (string id = null, int pageSize = 25)
        {

            var localVarPath = "/namespace/root/page";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("id", id)
            }); // query parameter
            if (pageSize > 0) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("pageSize", pageSize.ToString())
            }); // query parameter
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NamespaceRootInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<JObject>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (JObject) Configuration.ApiClient.Deserialize(localVarResponse, typeof(JObject)));
        }
    }
}
