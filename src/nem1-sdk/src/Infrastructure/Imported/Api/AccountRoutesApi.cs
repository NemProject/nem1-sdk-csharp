/* 
 * NIS1 API
 *
 * This document defines all the nis1 api routes and behaviour
 *
 * OpenAPI spec version: 1.0.0
 * Contact: kodtycoon@gmail.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using io.nem1.sdk.Infrastructure.Imported.Client;
using io.nem1.sdk.Infrastructure.Mapping;
using io.nem1.sdk.Model.Mosaics;
using io.nem1.sdk.Model.Transactions;
using Newtonsoft.Json.Linq;
using RestSharp;

namespace io.nem1.sdk.Infrastructure.Imported.Api
{
    /// <exclude />
    internal interface IAccountRoutesApi : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get harvesting information
        /// </summary>
        /// <remarks>
        /// Returns the harvesting information for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of AccountHarvestInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> AccountHarvestAsync (string address);

        /// <summary>
        /// Get harvesting information
        /// </summary>
        /// <remarks>
        /// Returns the harvesting information for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of ApiResponse (AccountHarvestInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AccountHarvestAsyncWithHttpInfo (string address);
        /// <summary>
        /// Get a list of mosaic definitions for an account
        /// </summary>
        /// <remarks>
        /// Returns the mosaic definitions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="parent">The optional parent namespace id. (optional)</param>
        /// <param name="id">The optional mosaic definition database id up to which mosaic definitions are returned. (optional)</param>
        /// <returns>Task of MosaicDefinitonInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> AccountMosaicDefinitionsAsync (string address, string parent = null, string id = null);

        /// <summary>
        /// Get a list of mosaic definitions for an account
        /// </summary>
        /// <remarks>
        /// Returns the mosaic definitions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="parent">The optional parent namespace id. (optional)</param>
        /// <param name="id">The optional mosaic definition database id up to which mosaic definitions are returned. (optional)</param>
        /// <returns>Task of ApiResponse (MosaicDefinitonInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> AccountMosaicDefinitionsAsyncWithHttpInfo (string address, string parent = null, string id = null);
        /// <summary>
        /// Get delegated root account information
        /// </summary>
        /// <remarks>
        /// Returns root account information for a given delegated address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of AccountInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> GetAccountForwardedAsync (string address);

        /// <summary>
        /// Get delegated root account information
        /// </summary>
        /// <remarks>
        /// Returns root account information for a given delegated address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of ApiResponse (AccountInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForwardedAsyncWithHttpInfo (string address);
        /// <summary>
        /// Get gelegated root account information
        /// </summary>
        /// <remarks>
        /// Returns root account information for a given delegated public key
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>Task of AccountInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> GetAccountForwardedFromPublicKeyAsync (string publicKey);

        /// <summary>
        /// Get gelegated root account information
        /// </summary>
        /// <remarks>
        /// Returns root account information for a given delegated public key
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>Task of ApiResponse (AccountInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForwardedFromPublicKeyAsyncWithHttpInfo (string publicKey);
        /// <summary>
        /// Get account information
        /// </summary>
        /// <remarks>
        /// Returns account information for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of AccountInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> GetAccountInfoAsync (string address);

        /// <summary>
        /// Get account information
        /// </summary>
        /// <remarks>
        /// Returns account information for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of ApiResponse (AccountInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountInfoAsyncWithHttpInfo (string address);
        /// <summary>
        /// Get account information
        /// </summary>
        /// <remarks>
        /// Returns account information for a given public key
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>Task of AccountInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> GetAccountInfoFromPublicKeyAsync (string publicKey);

        /// <summary>
        /// Get account information
        /// </summary>
        /// <remarks>
        /// Returns account information for a given public key
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>Task of ApiResponse (AccountInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountInfoFromPublicKeyAsyncWithHttpInfo (string publicKey);
        /// <summary>
        /// Get account status information
        /// </summary>
        /// <remarks>
        /// Returns account status information for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of AccountMetaDTO</returns>
        System.Threading.Tasks.Task<JObject> GetAccountStatusAsync (string address);

        /// <summary>
        /// Get account status information
        /// </summary>
        /// <remarks>
        /// Returns account status information for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of ApiResponse (AccountMetaDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetAccountStatusAsyncWithHttpInfo (string address);
        /// <summary>
        /// Get historical account information
        /// </summary>
        /// <remarks>
        /// Returns historical account information for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <param name="startHeight">The block height from which on the data should be supplied.</param>
        /// <param name="endHeight">The block height up to which the data should be supplied. The end height must be greater than or equal to the start height.</param>
        /// <param name="increment">The increment between transactions</param>
        /// <returns>Task of HistoricalInfoDTO</returns>
        System.Threading.Tasks.Task<JObject> GetHistoricalAccountInfoAsync (string address, long? startHeight, long? endHeight, int? increment);

        /// <summary>
        /// Get historical account information
        /// </summary>
        /// <remarks>
        /// Returns historical account information for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <param name="startHeight">The block height from which on the data should be supplied.</param>
        /// <param name="endHeight">The block height up to which the data should be supplied. The end height must be greater than or equal to the start height.</param>
        /// <param name="increment">The increment between transactions</param>
        /// <returns>Task of ApiResponse (HistoricalInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetHistoricalAccountInfoAsyncWithHttpInfo (string address, long? startHeight, long? endHeight, int? increment);
        /// <summary>
        /// Get all mosaics owned by an account
        /// </summary>
        /// <remarks>
        /// Returns the mosaics owned by a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of MosaicInfoDTO</returns>
        System.Threading.Tasks.Task<List<Mosaic>> MosaicsOwnedAsync (string address);

        /// <summary>
        /// Get all mosaics owned by an account
        /// </summary>
        /// <remarks>
        /// Returns the mosaics owned by a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of ApiResponse (MosaicInfoDTO)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> MosaicsOwnedAsyncWithHttpInfo (string address);
        /// <summary>
        /// Get all transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of Transactions.All</returns>
        System.Threading.Tasks.Task<List<Transaction>> TransactionsAllAsync (string address, string hash = null, string id = null);

        /// <summary>
        /// Get all transactions
        /// </summary>
        /// <remarks>
        /// Returns all transactions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (Transactions.All)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsAllAsyncWithHttpInfo (string address, string hash = null, string id = null);
        /// <summary>
        /// Get incoming transactions
        /// </summary>
        /// <remarks>
        /// Returns incoming transactions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of Transactions.All</returns>
        System.Threading.Tasks.Task<List<Transaction>> TransactionsIncomingAsync (string address, string hash = null, string id = null);

        /// <summary>
        /// Get incoming transactions
        /// </summary>
        /// <remarks>
        /// Returns incoming transactions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (Transactions.All)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsIncomingAsyncWithHttpInfo (string address, string hash = null, string id = null);
        /// <summary>
        /// Get outgoing transactions
        /// </summary>
        /// <remarks>
        /// Returns outgoing transactions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of Transactions.All</returns>
        System.Threading.Tasks.Task<List<Transaction>> TransactionsOutgoingAsync (string address, string hash = null, string id = null);

        /// <summary>
        /// Get outgoing transactions
        /// </summary>
        /// <remarks>
        /// Returns outgoing transactions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (Transactions.All)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsOutgoingAsyncWithHttpInfo (string address, string hash = null, string id = null);
        /// <summary>
        /// Get all unconfimred transactions
        /// </summary>
        /// <remarks>
        /// Returns all unconfirmed transactions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of Transactions.All</returns>
        System.Threading.Tasks.Task<List<Transaction>> TransactionsUnconfirmedAsync (string address);

        /// <summary>
        /// Get all unconfimred transactions
        /// </summary>
        /// <remarks>
        /// Returns all unconfirmed transactions for a given address
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of ApiResponse (Transactions.All)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsUnconfirmedAsyncWithHttpInfo (string address);

        #endregion Asynchronous Operations
    }

    /// <exclude />
    internal class AccountRoutesApi : IAccountRoutesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountRoutesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountRoutesApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountRoutesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountRoutesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        //[Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        //public void SetBasePath(String basePath)
        //{
        //   // do nothing
        //}

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get harvesting information Returns the harvesting information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>AccountHarvestInfoDTO</returns>
        public JObject AccountHarvest (string address)
        {
             ApiResponse<string> localVarResponse = AccountHarvestWithHttpInfo(address);
             return JObject.Parse(localVarResponse.Data);
        }

        /// <summary>
        /// Get harvesting information Returns the harvesting information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>ApiResponse of AccountHarvestInfoDTO</returns>
        public ApiResponse< string > AccountHarvestWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->AccountHarvest");

            var localVarPath = "/account/harvests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountHarvest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get harvesting information Returns the harvesting information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of AccountHarvestInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> AccountHarvestAsync (string address)
        {
             ApiResponse<string> localVarResponse = await AccountHarvestAsyncWithHttpInfo(address);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Get harvesting information Returns the harvesting information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of ApiResponse (AccountHarvestInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AccountHarvestAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->AccountHarvest");

            var localVarPath = "/account/harvests";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountHarvest", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a list of mosaic definitions for an account Returns the mosaic definitions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="parent">The optional parent namespace id. (optional)</param>
        /// <param name="id">The optional mosaic definition database id up to which mosaic definitions are returned. (optional)</param>
        /// <returns>MosaicDefinitonInfoDTO</returns>
        public JObject AccountMosaicDefinitions (string address, string parent = null, string id = null)
        {
             ApiResponse<string> localVarResponse = AccountMosaicDefinitionsWithHttpInfo(address, parent, id);
             return JObject.Parse(localVarResponse.Data);
        }

        /// <summary>
        /// Get a list of mosaic definitions for an account Returns the mosaic definitions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="parent">The optional parent namespace id. (optional)</param>
        /// <param name="id">The optional mosaic definition database id up to which mosaic definitions are returned. (optional)</param>
        /// <returns>ApiResponse of MosaicDefinitonInfoDTO</returns>
        public ApiResponse< string > AccountMosaicDefinitionsWithHttpInfo (string address, string parent = null, string id = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->AccountMosaicDefinitions");

            var localVarPath = "/account/mosaic/definition/page";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter
            if (parent != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("parent", parent)
            }); // query parameter
            if (id != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("id", id)
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountMosaicDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get a list of mosaic definitions for an account Returns the mosaic definitions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="parent">The optional parent namespace id. (optional)</param>
        /// <param name="id">The optional mosaic definition database id up to which mosaic definitions are returned. (optional)</param>
        /// <returns>Task of MosaicDefinitonInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> AccountMosaicDefinitionsAsync (string address, string parent = null, string id = null)
        {
             ApiResponse<string> localVarResponse = await AccountMosaicDefinitionsAsyncWithHttpInfo(address, parent, id);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Get a list of mosaic definitions for an account Returns the mosaic definitions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="parent">The optional parent namespace id. (optional)</param>
        /// <param name="id">The optional mosaic definition database id up to which mosaic definitions are returned. (optional)</param>
        /// <returns>Task of ApiResponse (MosaicDefinitonInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> AccountMosaicDefinitionsAsyncWithHttpInfo (string address, string parent = null, string id = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->AccountMosaicDefinitions");

            var localVarPath = "/account/mosaic/definition/page";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter
            if (parent != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("parent", parent)
            }); // query parameter
            if (id != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("id", id)
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AccountMosaicDefinitions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get delegated root account information Returns root account information for a given delegated address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>AccountInfoDTO</returns>
        public JObject GetAccountForwarded (string address)
        {
             ApiResponse<string> localVarResponse = GetAccountForwardedWithHttpInfo(address);
             return JObject.Parse(localVarResponse.Data);
        }

        /// <summary>
        /// Get delegated root account information Returns root account information for a given delegated address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>ApiResponse of AccountInfoDTO</returns>
        public ApiResponse< string > GetAccountForwardedWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->GetAccountForwarded");

            var localVarPath = "/account/get/forwarded";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter
            
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountForwarded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get delegated root account information Returns root account information for a given delegated address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of AccountInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> GetAccountForwardedAsync (string address)
        {
             ApiResponse<string> localVarResponse = await GetAccountForwardedAsyncWithHttpInfo(address);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Get delegated root account information Returns root account information for a given delegated address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of ApiResponse (AccountInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForwardedAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->GetAccountForwarded");

            var localVarPath = "/account/get/forwarded";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountForwarded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get gelegated root account information Returns root account information for a given delegated public key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>AccountInfoDTO</returns>
        public JObject GetAccountForwardedFromPublicKey (string publicKey)
        {
             ApiResponse<string> localVarResponse = GetAccountForwardedFromPublicKeyWithHttpInfo(publicKey);
             return JObject.Parse(localVarResponse.Data);
        }

        /// <summary>
        /// Get gelegated root account information Returns root account information for a given delegated public key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>ApiResponse of AccountInfoDTO</returns>
        public ApiResponse< string > GetAccountForwardedFromPublicKeyWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->GetAccountForwardedFromPublicKey");

            var localVarPath = "/account/get/forwarded/from-public-key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("publicKey", publicKey)
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountForwardedFromPublicKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get gelegated root account information Returns root account information for a given delegated public key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>Task of AccountInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> GetAccountForwardedFromPublicKeyAsync (string publicKey)
        {
             ApiResponse<string> localVarResponse = await GetAccountForwardedFromPublicKeyAsyncWithHttpInfo(publicKey);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Get gelegated root account information Returns root account information for a given delegated public key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>Task of ApiResponse (AccountInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountForwardedFromPublicKeyAsyncWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->GetAccountForwardedFromPublicKey");

            var localVarPath = "/account/get/forwarded/from-public-key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("publicKey", publicKey)
            }); // query parameter
           

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountForwardedFromPublicKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get account information Returns account information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>AccountInfoDTO</returns>
        public JObject GetAccountInfo (string address)
        {
             ApiResponse<string> localVarResponse = GetAccountInfoWithHttpInfo(address);
             return JObject.Parse(localVarResponse.Data);
        }

        /// <summary>
        /// Get account information Returns account information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>ApiResponse of AccountInfoDTO</returns>
        public ApiResponse< string > GetAccountInfoWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->GetAccountInfo");

            var localVarPath = "/account/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get account information Returns account information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of AccountInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> GetAccountInfoAsync (string address)
        {
             ApiResponse<string> localVarResponse = await GetAccountInfoAsyncWithHttpInfo(address);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Get account information Returns account information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of ApiResponse (AccountInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountInfoAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->GetAccountInfo");

            var localVarPath = "/account/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get account information Returns account information for a given public key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>AccountInfoDTO</returns>
        public JObject GetAccountInfoFromPublicKey (string publicKey)
        {
             ApiResponse<string> localVarResponse = GetAccountInfoFromPublicKeyWithHttpInfo(publicKey);
             return JObject.Parse(localVarResponse.Data);
        }

        /// <summary>
        /// Get account information Returns account information for a given public key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>ApiResponse of AccountInfoDTO</returns>
        public ApiResponse< string > GetAccountInfoFromPublicKeyWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->GetAccountInfoFromPublicKey");

            var localVarPath = "/account/get/from-public-key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("publicKey", publicKey)
            }); // query parameter
            

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfoFromPublicKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get account information Returns account information for a given public key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>Task of AccountInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> GetAccountInfoFromPublicKeyAsync (string publicKey)
        {
             ApiResponse<string> localVarResponse = await GetAccountInfoFromPublicKeyAsyncWithHttpInfo(publicKey);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Get account information Returns account information for a given public key
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="publicKey">Account from public key</param>
        /// <returns>Task of ApiResponse (AccountInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountInfoFromPublicKeyAsyncWithHttpInfo (string publicKey)
        {
            // verify the required parameter 'publicKey' is set
            if (publicKey == null)
                throw new ApiException(400, "Missing required parameter 'publicKey' when calling AccountRoutesApi->GetAccountInfoFromPublicKey");

            var localVarPath = "/account/get/from-public-key";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (publicKey != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("publicKey", publicKey)
            }); // query parameter
           

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountInfoFromPublicKey", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get account status information Returns account status information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>AccountMetaDTO</returns>
        public JObject GetAccountStatus (string address)
        {
             ApiResponse<string> localVarResponse = GetAccountStatusWithHttpInfo(address);
             return JObject.Parse(localVarResponse.Data);
        }

        /// <summary>
        /// Get account status information Returns account status information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>ApiResponse of AccountMetaDTO</returns>
        public ApiResponse< string > GetAccountStatusWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->GetAccountStatus");

            var localVarPath = "/account/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get account status information Returns account status information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of AccountMetaDTO</returns>
        public async System.Threading.Tasks.Task<JObject> GetAccountStatusAsync (string address)
        {
             ApiResponse<string> localVarResponse = await GetAccountStatusAsyncWithHttpInfo(address);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Get account status information Returns account status information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <returns>Task of ApiResponse (AccountMetaDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetAccountStatusAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->GetAccountStatus");

            var localVarPath = "/account/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAccountStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

       

        /// <summary>
        /// Get historical account information Returns historical account information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <param name="startHeight">The block height from which on the data should be supplied.</param>
        /// <param name="endHeight">The block height up to which the data should be supplied. The end height must be greater than or equal to the start height.</param>
        /// <param name="increment">The increment between transactions</param>
        /// <returns>Task of HistoricalInfoDTO</returns>
        public async System.Threading.Tasks.Task<JObject> GetHistoricalAccountInfoAsync (string address, long? startHeight, long? endHeight, int? increment)
        {
             ApiResponse<string> localVarResponse = await GetHistoricalAccountInfoAsyncWithHttpInfo(address, startHeight, endHeight, increment);
             return JObject.Parse(localVarResponse.Data);

        }

        /// <summary>
        /// Get historical account information Returns historical account information for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account from address</param>
        /// <param name="startHeight">The block height from which on the data should be supplied.</param>
        /// <param name="endHeight">The block height up to which the data should be supplied. The end height must be greater than or equal to the start height.</param>
        /// <param name="increment">The increment between transactions</param>
        /// <returns>Task of ApiResponse (HistoricalInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetHistoricalAccountInfoAsyncWithHttpInfo (string address, long? startHeight, long? endHeight, int? increment)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->GetHistoricalAccountInfo");
            // verify the required parameter 'startHeight' is set
            if (startHeight == null)
                throw new ApiException(400, "Missing required parameter 'startHeight' when calling AccountRoutesApi->GetHistoricalAccountInfo");
            // verify the required parameter 'endHeight' is set
            if (endHeight == null)
                throw new ApiException(400, "Missing required parameter 'endHeight' when calling AccountRoutesApi->GetHistoricalAccountInfo");
            // verify the required parameter 'increment' is set
            if (increment == null)
                throw new ApiException(400, "Missing required parameter 'increment' when calling AccountRoutesApi->GetHistoricalAccountInfo");

            var localVarPath = "/account/historical/get";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter
            if (startHeight != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("startHeight", startHeight.ToString())
            }); // query parameter
            if (endHeight != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("endHeight", endHeight.ToString())
            }); // query parameter
            if (increment != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("increment", increment.ToString())
            }); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetHistoricalAccountInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        
        /// <summary>
        /// Get all mosaics owned by an account Returns the mosaics owned by a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of MosaicInfoDTO</returns>
        public async System.Threading.Tasks.Task<List<Mosaic>> MosaicsOwnedAsync (string address)
        {
             ApiResponse<string> localVarResponse = await MosaicsOwnedAsyncWithHttpInfo(address);
             return new MosaicMapping().Apply(localVarResponse.Data);

        }

        /// <summary>
        /// Get all mosaics owned by an account Returns the mosaics owned by a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of ApiResponse (MosaicInfoDTO)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> MosaicsOwnedAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->MosaicsOwned");

            var localVarPath = "/account/mosaic/owned";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter
           
            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("MosaicsOwned", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all transactions Returns all transactions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of Transactions.All</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> TransactionsAllAsync (string address, string hash = null, string id = null)
        {
             ApiResponse<List<object>> localVarResponse = await TransactionsAllAsyncWithHttpInfo(address, hash, id);
             return localVarResponse.Data.Select(e => new TransactionMapping().Apply(e.ToString())).ToList();
        }

        /// <summary>
        /// Get all transactions Returns all transactions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (Transactions.All)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsAllAsyncWithHttpInfo (string address, string hash = null, string id = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->TransactionsAll");

            var localVarPath = "/account/transfers/all";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter
            if (hash != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("hash", hash)
            }); // query parameter
            if (id != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("id", id)
            }); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsAll", localVarResponse);
                if (exception != null) throw exception;
            }

            localVarResponse.Content = JObject.Parse(localVarResponse.Content)["data"].ToString();
            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

        /// <summary>
        /// Get incoming transactions Returns incoming transactions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of Transactions.All</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> TransactionsIncomingAsync (string address, string hash = null, string id = null)
        {
             ApiResponse<List<object>> localVarResponse = await TransactionsIncomingAsyncWithHttpInfo(address, hash, id);
             return localVarResponse.Data.Select(e => new TransactionMapping().Apply(e.ToString())).ToList();

        }

        /// <summary>
        /// Get incoming transactions Returns incoming transactions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (Transactions.All)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsIncomingAsyncWithHttpInfo (string address, string hash = null, string id = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->TransactionsIncoming");

            var localVarPath = "/account/transfers/incoming";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter
            if (hash != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("hash", hash)
            }); // query parameter
            if (id != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("id", id)
            }); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsIncoming", localVarResponse);
                if (exception != null) throw exception;
            }

            localVarResponse.Content = JObject.Parse(localVarResponse.Content)["data"].ToString();
            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

        /// <summary>
        /// Get outgoing transactions Returns outgoing transactions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of Transactions.All</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> TransactionsOutgoingAsync (string address, string hash = null, string id = null)
        {
             ApiResponse<List<object>> localVarResponse = await TransactionsOutgoingAsyncWithHttpInfo(address, hash, id);
             return localVarResponse.Data.Select(e => new TransactionMapping().Apply(e.ToString())).ToList();

        }

        /// <summary>
        /// Get outgoing transactions Returns outgoing transactions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <param name="hash">The numbers of transactions to return (optional)</param>
        /// <param name="id">Id last transaction id to apply pagination (optional)</param>
        /// <returns>Task of ApiResponse (Transactions.All)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsOutgoingAsyncWithHttpInfo (string address, string hash = null, string id = null)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->TransactionsOutgoing");

            var localVarPath = "/account/transfers/outgoing";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter
            if (hash != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("hash", hash)
            }); // query parameter
            if (id != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("id", id)
            }); // query parameter

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsOutgoing", localVarResponse);
                if (exception != null) throw exception;
            }
            localVarResponse.Content = JObject.Parse(localVarResponse.Content)["data"].ToString();
            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

        /// <summary>
        /// Get all unconfimred transactions Returns all unconfirmed transactions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of Transactions.All</returns>
        public async System.Threading.Tasks.Task<List<Transaction>> TransactionsUnconfirmedAsync (string address)
        {
             ApiResponse<List<object>> localVarResponse = await TransactionsUnconfirmedAsyncWithHttpInfo(address);
             return localVarResponse.Data.Select(e => new TransactionMapping().Apply(e.ToString())).ToList();

        }

        /// <summary>
        /// Get all unconfimred transactions Returns all unconfirmed transactions for a given address
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="address">Account address</param>
        /// <returns>Task of ApiResponse (Transactions.All)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<object>>> TransactionsUnconfirmedAsyncWithHttpInfo (string address)
        {
            // verify the required parameter 'address' is set
            if (address == null)
                throw new ApiException(400, "Missing required parameter 'address' when calling AccountRoutesApi->TransactionsUnconfirmed");

            var localVarPath = "/account/unconfirmedTransactions";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (address != null) localVarQueryParams.AddRange(new List<KeyValuePair<String, String>>()
            {
                new KeyValuePair<string, string>("address", address)
            }); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TransactionsUnconfirmed", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<object>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<object>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<object>)));
        }

    }
}
